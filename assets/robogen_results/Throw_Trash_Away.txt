========== Generated task name and description ==========
Throw Trash Away
The robotic arm places an item of trash inside the trash can

========== Scene configuration ==========
- use_table: false
- center: (1.5, 1.5, 0)
  lang: a common trash can
  name: TrashCan
  on_table: false
  path: trashcan.urdf
  size: 0.6
  type: urdf
- center: (0.8, 1.2, 0)
  lang: a pile of paper waste
  name: Trash
  on_table: true
  path: paper_waste.obj
  size: 0.1
  type: mesh
- set_joint_angle_object_name: TrashCan
- spatial_relationships: []
- center: (2, 1.5, 0)
  lang: a common broom
  name: broom
  on_table: false
  path: broom.obj
  size: 1.2
  type: mesh
- center: (1.1, 0.8, 0)
  lang: a common dustpan
  name: dustpan
  on_table: false
  path: dustpan.obj
  size: 0.3
  type: mesh
- center: (0.9, 1.4, 0)
  lang: a common soda can
  name: soda_can
  on_table: true
  path: soda_can.obj
  size: 0.1
  type: mesh

========== Task decompositions (substep: learning algorithm type, action space) ==========
grasp the trash can lid: primitive, none
open the trash can lid: reward, delta_translation
grasp the trash: primitive, none
put the trash into the trash can: reward, target_location
release the trash: primitive, none
grasp the trash can lid again: primitive, none
close the trash can lid: reward, delta_translation

========== Reward and primitives ==========
- grasp_the_trash_can_lid
    def execute(self):
        rgbs, final_state = grasp_object_link(self, "TrashCan", "link_0")  
        grasped_object, grasped_link = get_grasped_object_and_link_name(self)
        success = (grasped_object == "TrashCan".lower() and grasped_link == "link_0".lower())

        return rgbs, final_state, success

- open_the_trash_can_lid
    def _compute_reward(self):
        # This reward encourages the end-effector to stay near the lid to grasp it.
        eef_pos = get_eef_pos(self)[0]
        lid_pos = get_link_state(self, "TrashCan", "link_0")
        reward_near = -np.linalg.norm(eef_pos - lid_pos)
        
        # Get the joint state of the lid. The semantics and the articulation tree show that joint_0 connects link_0 and is the joint that controls the rotation of the lid.
        joint_angle = get_joint_state(self, "TrashCan", "joint_0") 
        # The reward is the negative distance between the current joint angle and the joint angle when the lid is fully open (upper limit).
        joint_limit_low, joint_limit_high = get_joint_limit(self, "TrashCan", "joint_0")
        target_joint_angle = joint_limit_high
        
        diff = np.abs(joint_angle - target_joint_angle)
        reward_joint =  -diff
        
        reward = reward_near + 5 * reward_joint
        
        success = diff < 0.1 * (joint_limit_high - joint_limit_low)
        
        return reward, success

- grasp_the_trash
    def execute(self):
        rgbs, final_state = grasp_object(self, "Trash")
        success = get_grasped_object_name(self) == "Trash".lower()

        return rgbs, final_state, success

- put_the_trash_into_the_trash_can
    def _compute_reward(self):
        # Get the current trash position
        trash_position = get_position(self, "Trash")
        
        # This reward encourages the end-effector to stay near the trash to grasp it.
        eef_pos = get_eef_pos(self)[0]
        reward_near = -np.linalg.norm(eef_pos - trash_position)
        
        # Get the trash can body bounding box
        min_aabb, max_aabb = get_bounding_box_link(self, "TrashCan", "link_1") # from the semantics, link_1 is the body of the trash can.
        diff = np.array(max_aabb) - np.array(min_aabb)
        min_aabb = np.array(min_aabb) + 0.05 * diff  # shrink the bounding box a bit
        max_aabb = np.array(max_aabb) - 0.05 * diff
        center = (np.array(max_aabb) + np.array(min_aabb)) / 2
        
        # another reward is one if the trash is inside the trash can bounding box
        reward_in = 0
        if in_bbox(self, trash_position, min_aabb, max_aabb): reward_in += 1
        
        # another reward is to encourage the robot to move the trash to be near the trash can
        # we need this to give a dense reward signal for the robot to learn to perform this task. 
        reward_reaching = -np.linalg.norm(center - trash_position)
        
        # The task is considered to be successful if the trash is inside the trash can bounding box
        success = in_bbox(self, trash_position, min_aabb, max_aabb)
        
        # We give more weight to reward_in, which is the major goal of the task.
        reward = 5 * reward_in + reward_reaching + reward_near
        return reward, success

- release_the_trash
    def execute(self):
        rgbs, final_state = release_grasp(self)
        success = get_grasped_object_name(self) == None

        return rgbs, final_state, success

- grasp_the_trash_can_lid_again
    def execute(self):
        rgbs, final_state = grasp_object_link(self, "TrashCan", "link_0")
        grasped_object, grasped_link = get_grasped_object_and_link_name(self)
        success = (grasped_object == "TrashCan".lower() and grasped_link == "link_0".lower())  

        return rgbs, final_state, success

- close_the_trash_can_lid
    def _compute_reward(self):
        # This reward encourages the end-effector to stay near the lid
        eef_pos = get_eef_pos(self)[0]
        lid_pos = get_link_state(self, "TrashCan", "link_0")
        reward_near = -np.linalg.norm(eef_pos - lid_pos)
        
        # Get the joint state of the lid. The semantics and the articulation tree show that joint_0 connects link_0 and is the joint that controls the rotation of the lid.
        joint_angle = get_joint_state(self, "TrashCan", "joint_0") 
        # The reward encourages the robot to make joint angle of the lid to be the lower limit to close it.
        joint_limit_low, joint_limit_high = get_joint_limit(self, "TrashCan", "joint_0")
        target_joint_angle = joint_limit_low
        
        diff = np.abs(target_joint_angle - joint_angle)
        reward_joint =  -diff
        
        reward = reward_near + 5 * reward_joint
        
        success = diff < 0.1 * (joint_limit_high - joint_limit_low)       
        
        return reward, success

