========== Generated task name and description ==========
Change Lamp Direction
The robotic arm will alter the lamp's light direction by manipulating the lamps head

========== Scene configuration ==========
- use_table: true
- center: (0.5, 0.5, 0)
  lang: a common desk lamp
  name: Lamp
  on_table: true
  path: lamp.urdf
  size: 0.5
  type: urdf
- joint_3: random
  set_joint_angle_object_name: Lamp
- spatial_relationships: []
- center: (0.2, 0.2, 0)
  lang: a common spiral notebook
  name: Notebook
  on_table: true
  path: notebook.obj
  size: 0.3
  type: mesh
- center: (0.2, 0.4, 0)
  lang: a common ballpoint pen
  name: Pen
  on_table: true
  path: pen.obj
  size: 0.015
  type: urdf
- center: (0.8, 0.8, 0)
  lang: a coffee mug
  name: Coffee Mug
  on_table: true
  path: mug.obj
  size: 0.12
  type: mesh
- center: (0.5, 0.2, 0)
  lang: a desktop computer monitor
  name: Computer Monitor
  on_table: false
  path: monitor.obj
  size: 0.5
  type: mesh

========== Task decompositions (substep: learning algorithm type, action space) ==========
grasp the lamps head: primitive, none
change the lamps light direction: reward, delta_translation

========== Reward and primitives ==========
- grasp_the_lamps_head
    def execute(self):
        rgbs, final_state = grasp_object_link(self, "Lamp", "link_3")  
        success = check_grasped(self, "Lamp", "link_3")

        return rgbs, final_state, success

- change_the_lamps_light_direction
    def _compute_reward(self):
        # This reward encourages the end-effector to stay near the lamp's head to grasp it.
        eef_pos = get_eef_pos(self)[0]
        head_pos = get_link_state(self, "Lamp", "link_3")
        reward_near = -np.linalg.norm(eef_pos - head_pos)
        
        # Get the joint state of the lamp's head. The semantics and the articulation tree show that joint_3 connects link_3 and is the joint that controls the rotation of the lamp's head.
        joint_angle = get_joint_state(self, "Lamp", "joint_3") 
        # The reward is the negative distance between the current joint angle and the joint angle when the lamp's head is fully rotated (upper limit).
        joint_limit_low, joint_limit_high = get_joint_limit(self, "Lamp", "joint_3")
        diff = np.abs(joint_angle - joint_limit_high)
        reward_joint =  -diff
        
        reward = reward_near + 5 * reward_joint
        
        success = diff < 0.35 * (joint_limit_high - joint_limit_low)
        
        return reward, success

