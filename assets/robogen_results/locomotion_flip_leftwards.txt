========== Generated task name and description ==========
Flip leftwards
The robot flips towards left

========== Reward ==========
def _compute_reward(self):
    # we first get some information of the quadruped/humanoid.
    # COM_pos and COM_quat are the position and orientation (quaternion) of the center of mass of the quadruped/humanoid.
    COM_pos, COM_quat = get_robot_pose(self)
    # COM_vel, COM_ang are the velocity and angular velocity of the center of mass of the quadruped/humanoid.
    COM_vel, COM_ang = get_robot_velocity(self)

    # face_dir, side_dir, and up_dir are three axes of the rotation of the quadruped/humanoid.
    # face direction points from the center of mass towards the face direction of the quadruped/humanoid.
    # side direction points from the center of mass towards the side body direction of the quadruped/humanoid.
    # up direction points from the center of mass towards up, i.e., the negative direction of the gravity. 
    # gravity direction is [0, 0, -1].
    # when initialized, the face of the robot is along the x axis, the side of the robot is along the y axis, and the up of the robot is along the z axis.
    face_dir, side_dir, up_dir = get_robot_direction(self, COM_quat)

    target_side = np.array([0, 1, 0]) # maintain initial side direction during flip
    target_ang = np.array([-50, 0, 0.0]) # spin around x axis to do the leftwards flip, since x is the face direction of the robot.

    alpha_ang = 1.0
    alpha_side = 1.0

    r_ang    = - alpha_ang * np.linalg.norm(COM_ang - target_ang)
    r_side   = - alpha_side * np.linalg.norm(side_dir - target_side)
    r = r_ang + r_side

    # there is a default energy term that penalizes the robot for consuming too much energy. This should be included for all skill.
    r_energy = get_energy_reward(self)
    return r + r_energy