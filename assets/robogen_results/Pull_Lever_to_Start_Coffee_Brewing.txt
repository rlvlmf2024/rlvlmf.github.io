========== Generated task name and description ==========
Pull Lever to Start Coffee Brewing
The robot arm pulls a lever to start the brewing process of the coffee machine

========== Scene configuration ==========
- use_table: true
- center: (0.5, 0.5, 0)
  lang: a common coffee machine
  name: CoffeeMachine
  on_table: true
  path: coffee_machine.urdf
  size: 0.6
  type: urdf
- joint_6: '0'
  set_joint_angle_object_name: CoffeeMachine
- spatial_relationships: []
- center: (0.2, 0.2, 0)
  lang: a common coffee cup
  name: Cup
  on_table: true
  path: cup.obj
  size: 0.1
  type: mesh
- center: (0.8, 0.8, 0)
  lang: a common sugar container
  name: SugarContainer
  on_table: true
  path: sugar_container.obj
  size: 0.15
  type: mesh
- center: (1.8, 0.5, 0)
  lang: a kitchen fridge
  name: Refrigerator
  on_table: false
  path: fridge.obj
  size: 1.7
  type: urdf

========== Task decompositions (substep: learning algorithm type, action space) ==========
grasp the lever of the coffee machine: primitive, none
pull the lever to start the brewing process: reward, delta_translation

========== Reward and primitives ==========
- grasp_the_lever_of_the_coffee_machine
    def execute(self):
        rgbs, final_state = grasp_object_link(self, "CoffeeMachine", "link_6")  
        success = check_grasped(self, "CoffeeMachine", "link_6")

        return rgbs, final_state, success

- pull_the_lever_to_start_the_brewing_process
    def _compute_reward(self):
        # This reward encourages the end-effector to stay near the lever to grasp it.
        eef_pos = get_eef_pos(self)[0]
        lever_pos = get_link_state(self, "CoffeeMachine", "link_6")
        reward_near = -np.linalg.norm(eef_pos - lever_pos)
        
        # Get the joint state of the lever. The semantics and the articulation tree show that joint_6 connects link_6 and is the joint that controls the rotation of the lever.
        joint_angle = get_joint_state(self, "CoffeeMachine", "joint_6") 
        # The reward is the negative distance between the current joint angle and the joint angle when the lever is fully pulled (upper limit).
        joint_limit_low, joint_limit_high = get_joint_limit(self, "CoffeeMachine", "joint_6")
        diff = np.abs(joint_angle - joint_limit_high)
        reward_joint =  -diff
        
        reward = reward_near + 5 * reward_joint
        
        success = diff < 0.1 * (joint_limit_high - joint_limit_low)
        
        return reward, success

